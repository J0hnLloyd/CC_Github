// Credits to: https://www.youtube.com/watch?v=IIrC5Qcb2G4&t=125s
//                     https://www.youtube.com/watch?v=xkIzsoNkHyA

// Audio Credits: https://pixabay.com/sound-effects/search/8-bit/ all audios are pixabay generated.

// Game variables:

let ball;
let paddle1;
let paddle2;
let ballSpeed = 5; // Speed of the ball...
let paddleHeight = 80; // Height of the paddles...
let paddleWidth = 10; // Width of the paddles...
let paddleSpeed = 6; // Speed of the paddles...

let score1 = 0; // Player 1's score...
let score2 = 0; // Player 2's score...
let gameWon = false; // Determines if the game is won...
let gameState = "title"; // Current state of the game: "title", "play", or "gameOver"...

let particles = []; // Array to store particles for effects...
let hitSound, winSound, restartSound, enterSound; // Sound variables for different soundFXs...
let customFont; // Variable for custom font...
let bgImage; // Variable for background image...
let titleMusic; // Variable to store title screen background music...

// Preloads all resources or contents used before setup...
function preload() {
  // Load the sound files
  hitSound = loadSound('aud/colide_1.mp3'); // Sound effect for ball-paddle collision...
  winSound = loadSound('aud/win.mp3'); // Sound effect for winning the game...
  restartSound = loadSound('aud/colide.mp3'); // Used sound effect when restarting the game...
  enterSound = loadSound('aud/colide.mp3'); // Used sound effect when entering the game...

  // Loads custom font...
  customFont = loadFont('font/pixel.ttf'); // Replace with your actual font file name

  bgImage = loadImage('img/background.png'); // Loads background images...

  
  titleMusic = loadSound('aud/theme.mp3'); // Loads title screen / Game Theme... (Only plays on Title screen)
}

// Setup function to initialize the game...
function setup() {
  createCanvas(800, 400); // Create a canvas of 800x400 pixels

  // Initialize ball and paddles
  ball = new Ball();
  paddle1 = new Paddle(10); // Player 1's paddle positioned at x = 10
  paddle2 = new Paddle(width - 20); // Player 2's paddle positioned at the right edge of the canvas
}

// Draw function...
function draw() {
  background(0); // Sets the background to black...

  // Game states...
  if (gameState === "title") {
    displayTitleScreen(); // Displays title screen...
    if (keyIsDown(ENTER)) {
      enterSound.play(); // Plays sound effect when ENTER KEY is pressed...
      gameState = "play"; // Switches to gameplay state...
      titleMusic.stop(); // Stops title music when in gameplay state... (Keypressed ENTER key)
    }
  } else if (gameState === "play") {
    if (titleMusic.isPlaying()) {
      titleMusic.stop();
    }

    // Draws a traced line in the middle as a net decoration in gameplay state...
    stroke(9, 255, 0); // Color for traced line... (net)
    strokeWeight(3); // Weight of traced line (net) or thickness...
    for (let i = 0; i < height; i += 20) {
      line(width / 2, i, width / 2, i + 10); // Draws / Displays the traced line... (net)
    }
    noStroke(); // Resets stroke settings...

    // Display and updates paddles...
    paddle1.show();
    paddle1.update();
    paddle2.show();
    paddle2.update();

    // Display and updates ball...
    if (!gameWon) {
      ball.show();
      ball.update();

      // Checks for paddle collisions
      ball.checkCollision(paddle1);
      ball.checkCollision(paddle2);

      // Displays scores
      displayScore();

      // Check if a player has won the game
      checkWinner();

      // Updates and display particless...
      for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].show();
        if (particles[i].finished()) {
          particles.splice(i, 1); // Remove finished particles...
        }
      }
    } else {
      // Switch to the game-over state...
      gameState = "gameOver";
    }
  } else if (gameState === "gameOver") {
    // Display winning message...
    displayWinner();
  }
}

// Ball class...
class Ball {
  constructor() {
    this.reset(); // Initializes ball properties...
  }

  // Resets ball position and speed...
  reset() {
    this.x = width / 2;
    this.y = height / 2;
    this.xSpeed = random([-1, 1]) * ballSpeed;
    this.ySpeed = random([-1, 1]) * ballSpeed;
  }

  // Updates ball position and checks for scoring...
  update() {
    this.x += this.xSpeed;
    this.y += this.ySpeed;

    if (this.y < 0 || this.y > height) {
      this.ySpeed *= -1; // Reverses ball vertical direction (When Collide)...
    }

    // Scoring...
    if (this.x < 0) {
      score2++; // Player 2 scores...
      this.reset(); // Ball Position Resets if player 2 scored...
    } else if (this.x > width) {
      score1++; // Player 1 scores
      this.reset(); // Ball Position Resets if player 1 scored...
    }
  }

  // Paddle Collisions...
  checkCollision(paddle) {
    if (
      this.x - paddleWidth / 2 < paddle.x + paddle.width &&
      this.x + paddleWidth / 2 > paddle.x &&
      this.y > paddle.y &&
      this.y < paddle.y + paddle.height
    ) {
      // Ball hits the front of the paddle...
      if ((this.xSpeed < 0 && this.x > paddle.x + paddle.width - 5) ||
          (this.xSpeed > 0 && this.x < paddle.x + 5)) {
        // Ball's direction reverses and momuntarily each paddle accelerates ball's speed...
        this.xSpeed *= -1.1;
        this.ySpeed *= 1.1;

        // Creates particles for when ball hits paddle explosion like effect...
        for (let i = 0; i < 20; i++) {
          particles.push(new Particle(this.x, this.y));
        }

        paddle.shake(); // Triggers paddle shake effect...

        hitSound.play(); // Plays the hit sound... (Collide mp3)
      } else {
        // Ball hits the top or bottom of the paddle, award point to opponent...
        
// I encountered an issue where the ballâ€™s speed increased significantly each time it hit the top or bottom of a paddle, causing it to potentially hit the paddle multiple times and accelerate uncontrollably. To fixthis, I modified the code so that when the ball hits the top or bottom of a paddle, it awards a point to the opposing player instead. This way, it prevents excessive acceleration and ensures a more balanced gameplay experience.

        if (this.x < width / 2) {
          score2++; // When Ball hits paddle1 | points awarded to player 2...
        } else {
          score1++; // When Ball hits paddle2 | points awardedto player 1...
        }
        this.reset(); // Resets ball position...
      }
    }
  }

  // Displays the ball...
  show() {
    fill(9, 255, 0); // Sets color to green...
    rect(this.x - 10, this.y - 10, 20, 20); // Draws ball as a square... (Makes it more feel Retro or Pixelated look)
  }
}

// Paddle class...
class Paddle {
  constructor(x) {
    this.x = x; // Set x position...
    this.y = height / 2 - paddleHeight / 2; // Centers the paddle vertically...
    this.width = paddleWidth;
    this.height = paddleHeight;
    this.shakeOffset = 0; // Shake effect...
    this.shakeDuration = 0; // Duration of shake effect...
  }

  // Paddle positions | Paddle controls...
  update() {
    // Player 1's controls...
    if (this.x < width / 2) {
      if (keyIsDown(UP_ARROW)) { // Up Arrow key...
        this.y -= paddleSpeed;
      } else if (keyIsDown(DOWN_ARROW)) { // Down Arrow key...
        this.y += paddleSpeed;
      }
    }

    // Player 2's controls...
    if (this.x > width / 2) {
      if (keyIsDown(87)) { // W key...
        this.y -= paddleSpeed;
      } else if (keyIsDown(83)) { // S key...
        this.y += paddleSpeed;
      }
    }

    this.y = constrain(this.y, 0, height - this.height);

    // Updates shake effect...
    if (this.shakeDuration > 0) {
      this.shakeOffset = random(-5, 5);
      this.shakeDuration--; // Decrease shake duration...
    } else {
      this.shakeOffset = 0;
    }
  }

  // Triggers / Displays shake effect...
  shake() {
    this.shakeDuration = 8; // Sets shake duration...
  }

  // Displays the paddles
  show() {
    fill(9, 255, 0); // Paddles Colors...
    rect(this.x + this.shakeOffset, this.y, this.width, this.height); // Draw paddle with shake offset
  }
}

// Particle class...
class Particle {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.xSpeed = random(-2, 2); // Random x speed...
    this.ySpeed = random(-2, 2); // Random y speed...
    this.alpha = 255; // Initial value for fading effect...
  }

  // Particle positions...
  update() {
    this.x += this.xSpeed;
    this.y += this.ySpeed;
    this.alpha -= 2; // Duration of fading effect...
  }

  // Checks if particle is finished...
  finished() {
    return this.alpha < 0;
  }

  // Displays the particle...
  show() {
    noStroke(); // Removes Shape outlines...
    fill(9, 255, 0, this.alpha); // Particles Color...
    rect(this.x, this.y, 8, 8); // Draw particle as square...
  }
}

// Score Displays
function displayScore() {
  textFont(customFont); // Sets Custom font...
  textAlign(CENTER); // Center aligns text...
  textSize(45); // Sets Text size...
  fill(255); // Sets Text color to white...
  text(score1, width / 4, 50); // Displays Player 1's score...
  text(score2, (3 * width) / 4, 50); // Displays Player 2's score...
}

// Checks for Winner based on player score...
function checkWinner() {
  if (score1 >= 5) {
    gameWon = true; // For player 1...
    winner = "Player 1 Wins!"; // Sets winner text
    winSound.play(); // Plays win sound effect... (win mp3)
  } else if (score2 >= 5) {
    gameWon = true; // For player 2...
    winner = "Player 2 Wins!"; // Sets winner text...
    winSound.play(); // Plays win sound effect... (win mp3)
  }
}

// Displays the winner and options to restart...
function displayWinner() {
  image(bgImage, 0, 0, width, height); // Displays the background image...
  textFont(customFont); // Sets custom font...
  textAlign(CENTER); // Center Aligns text...
  textSize(48); // Sets Text size...
  fill(255); // Sets Text color to white...
  text(winner, width / 2, height / 2); // Displays the winning message...
  textSize(24); // Sets text size for restarting game...
  text("Press R to go to Title Screen", width / 2, height / 2 + 50); // Instructions to restart

  if (keyIsDown(82)) { // R key...
    restartSound.play(); // Play restart sound... (Collide mp3)
    score1 = 0; // Resets scores of both players
    score2 = 0;
    gameWon = false; // Reset game...
    ball.reset(); // Reset ball position...
    gameState = "title"; // Switch to title screen...
    titleMusic.loop(); // Restart title music...
  }
}

// Displays Title Screen...
function displayTitleScreen() {
  image(bgImage, 0, 0, width, height); // Displays the background image...
  textFont(customFont); // Sets custom font...
  textAlign(CENTER); // Center Aligns text...
  textSize(48); // Sets Title text size...
  fill(9, 255, 0); // Color for title text...
  text("RETRO PONG", width / 2, 140); // Game Title...
  fill(255); // Set text color to white...
  textSize(24); // Sets Instruction text size...
  text("Press ENTER to play", width / 2, 190);

  // Player controls instruction in Title Screen...
  fill(9, 255, 0); // Set text color to green...
  textSize(20); // Set controls text size...
  text("PLAYER 1 CONTROLS:", 160, height / 2 + 70); // Player 1 controls...
  textSize(18); // Set controls detail text size...
  text("W / S Keys", 160, height / 2 + 110); // Player 1 controls details...
  textSize(20); // Set controls text size...
  text("PLAYER 2: CONTROLS", 640, height / 2 + 70); // Player 2 controls...
  textSize(18); // Set controls detail text size
  text("UP / DOWN Keys", 640, height / 2 + 110); // Player 2 controls details...
  
  // Plays the music...
  if (!titleMusic.isPlaying()) {
    titleMusic.loop(); // Loop the title music... (Only in Title Screen)
  }
}